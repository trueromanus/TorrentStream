<!doctype html>
<html window-frame="normal">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width">
    <link href="layout.css" rel="stylesheet" />
    <style>
        body {
            margin: 0;
            overflow: hidden;
        }

        .torrents-container {
            width: *;
            height: *;
            flow: vertical;
        }
        .torrents-list-container {
            overflow: auto;
            border-left: 1px solid lightgray;
        }
        .torrents-info-container {
            width: *;
            height: 1*;
            background-color: green;
        }
        .torrents-column {
            border-right: 1px solid lightgray;
            text-overflow: ellipsis;
            white-space: nowrap;
            display: inline-block;
            width: *;
        }
        .torrents-column > span {
            margin-left: 4px;
            margin-right: 4px;
        }
        .torrents-column-value {
            border-right: 1px solid transparent;
            overflow-x: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }
        .torrents-column-value > span {
            padding-left: 4px;
            margin-right: 4px;
        }
        .torrents-resizer {
            cursor: pointer;
            width: 5px;
        }
        .selected-torrent {
            background-color: lightgray;
        }

        .state-container {
            width: 200px;
            overflow: auto;
        }
        .state-item {
            height: 30px;
        }
        .state-item div {
            margin-left: 4px;
            margin-right: 6px;
        }
        .state-item span {
            margin-left: 2px;
        }
        .state-title {
            height: 20px;
            margin-top: 8px;
            margin-bottom: 4px;
        }
        .state-title span {
            font-weight: bold;
            margin-left: 8px;
        }
        .selected-state {
            background-color: lightgray;
        }
    </style>
    <script type="module">
        Window.this.caption = 'TorrentStream';

        import { createApp, ref } from "./vue-esm.js";

        createApp({
            setup() {
                const torrents = ref([]);
                const states = ref([
                    {
                        title: 'All',
                        icon: 'all.svg'
                    },
                    {
                        title: 'Downloading',
                        icon: 'downloading.svg'
                    },
                    {
                        title: 'Seeding',
                        icon: 'seeding.svg'
                    },
                    {
                        title: 'Completed',
                        icon: 'completed.svg'
                    },
                    {
                        title: 'Runned',
                        icon: 'active.svg'
                    },
                    {
                        title: 'Stopped',
                        icon: 'stop.svg'
                    },
                    {
                        title: 'Errored',
                        icon: 'error.svg'
                    }
                ]);
                const torrentColumns = ref([
                    {
                        title: "Name",
                        width: 140,
                        minWidth: 140,
                        align: "left",
                        field: "torrentName",
                    },
                    {
                        title: "Size",
                        width: 95,
                        minWidth: 95,
                        align: "right",
                        field: "size",
                    },
                    {
                        title: "Progress",
                        width: 95,
                        minWidth: 95,
                        align: "left",
                        field: "percent"
                    },
                    {
                        title: "Status",
                        width: 85,
                        minWidth: 85,
                        field: "status"
                    },
                    {
                        title: "Seeds",
                        width: 65,
                        minWidth: 65,
                        align: "right",
                        field: "seeds"
                    },
                    {
                        title: "Peers",
                        width: 65,
                        minWidth: 65,
                        align: "right",
                        field: "peers"
                    },
                    {
                        title: "Down speed",
                        width: 100,
                        minWidth: 100,
                        align: "right",
                        field: "downloadSpeed"
                    },
                    {
                        title: "Up speed",
                        width: 100,
                        minWidth: 100,
                        align: "right",
                        field: "uploadSpeed"
                    }
                ]);
                const selectedState = ref(states.value[0]);
                const selectedTorrent = ref(null);
                const movedColumn = ref(null);
                const movedColumnX = ref(0);

                function selectState(item) {
                    selectedState.value = item;
                }

                async function refreshTorrent() {
                    const response = await fetch("data.json");
                    if (!response.ok) return;

                    torrents.value = await response.json();
                }

                function startRefreshTorrent() {
                    refreshTorrent();

                    setInterval(
                        () => {
                            refreshTorrent();
                        },
                        3000 // update each 3 seconds
                    );
                }

                function columnMouseMove(event) {
                    if (!movedColumn.value) return;
                    const difference = event.clientX - movedColumnX.value;
                    movedColumn.value.width = movedColumn.value.width + difference;
                    movedColumnX.value = event.clientX;
                }

                function columnMouseDown(event, column) {
                    movedColumn.value = column;
                    movedColumnX.value = event.clientX;
                }

                function columnMouseUp(event) {
                    movedColumn.value = null;
                    movedColumnX.value = 0;
                }

                startRefreshTorrent();

                return {
                    torrents,
                    states,
                    selectedState,
                    selectedTorrent,
                    selectState,
                    torrentColumns,
                    columnMouseMove,
                    columnMouseDown,
                    columnMouseUp,
                }
            }
        }).mount('#app');
    </script>
</head>
<body>
    <div id="app" class="full-screen-size flex-row">
        <div class="state-container flex-col height-100-percent">
            <div class="state-title width-100-percent">
                <span>Status</span>
            </div>
            <div v-for="(item, index) in states"
                 :key="index"
                 class="state-item flex-row width-100-percent flex-row-items-center"
                 :class="{ 'selected-state': selectedState === item }"
                 @click="selectState(item)">
                <div>
                    <img :src="item.icon" height="50" width="20" />
                </div>
                <span>{{ item.title }}</span>
            </div>
        </div>
        <div class="torrents-container">
            <div class="torrents-list-container flex-column width-100-percent flex-2-height">
                <div class="flex-row" @mousemove="columnMouseMove($event)" @mouseup="columnMouseUp($event)">
                    <div v-for="(torrentColumn,index) in torrentColumns"
                         :key="index"
                         :style="{'width': torrentColumn.width + 'px'}"
                         :class="{'torrents-column': true, 'flex-row': true, 'flex-row-items-right': torrentColumn.align === 'right'}">
                        <span>{{ torrentColumn.title }}</span>
                        <div class="flex-2-width"></div>
                        <div @mousedown="columnMouseDown($event, torrentColumn)" class="torrents-resizer height-100-percent"></div>
                    </div>
                </div>
                <div class="flex-column">
                    <div v-for="(torrent,index) in torrents"
                         :key="index"
                         :class="{ 'flex-row': true, 'selected-torrent':  selectedTorrent === torrent}"
                         @click="selectedTorrent = torrent">
                        <div v-for="(torrentColumn,subindex) in torrentColumns"
                             :key="subindex"
                             :style="{'width': torrentColumn.width + 'px'}"
                             :class="{'torrents-column-value': true, 'flex-row': true, 'flex-row-items-right': torrentColumn.align === 'right'}">
                            <span>{{ torrent[torrentColumn.field] }}</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="torrents-info-container">
            </div>
        </div>
    </div>
</body>
</html>